/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.social.ecom.order.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderCreate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3884518951291480743L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderCreate\",\"namespace\":\"com.social.ecom.order.avro\",\"fields\":[{\"name\":\"customerId\",\"type\":\"int\"},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItem\",\"fields\":[{\"name\":\"productId\",\"type\":\"int\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"float\"}]}}},{\"name\":\"totalAmount\",\"type\":\"float\"},{\"name\":\"orderDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderCreate> ENCODER =
      new BinaryMessageEncoder<OrderCreate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderCreate> DECODER =
      new BinaryMessageDecoder<OrderCreate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderCreate> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderCreate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderCreate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderCreate>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderCreate to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderCreate from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderCreate instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderCreate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int customerId;
  @Deprecated public java.util.List<com.social.ecom.order.avro.OrderItem> items;
  @Deprecated public float totalAmount;
  @Deprecated public java.lang.String orderDate;
  @Deprecated public java.lang.String status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderCreate() {}

  /**
   * All-args constructor.
   * @param customerId The new value for customerId
   * @param items The new value for items
   * @param totalAmount The new value for totalAmount
   * @param orderDate The new value for orderDate
   * @param status The new value for status
   */
  public OrderCreate(java.lang.Integer customerId, java.util.List<com.social.ecom.order.avro.OrderItem> items, java.lang.Float totalAmount, java.lang.String orderDate, java.lang.String status) {
    this.customerId = customerId;
    this.items = items;
    this.totalAmount = totalAmount;
    this.orderDate = orderDate;
    this.status = status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return items;
    case 2: return totalAmount;
    case 3: return orderDate;
    case 4: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.Integer)value$; break;
    case 1: items = (java.util.List<com.social.ecom.order.avro.OrderItem>)value$; break;
    case 2: totalAmount = (java.lang.Float)value$; break;
    case 3: orderDate = value$ != null ? value$.toString() : null; break;
    case 4: status = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public int getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(int value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<com.social.ecom.order.avro.OrderItem> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<com.social.ecom.order.avro.OrderItem> value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public float getTotalAmount() {
    return totalAmount;
  }


  /**
   * Sets the value of the 'totalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(float value) {
    this.totalAmount = value;
  }

  /**
   * Gets the value of the 'orderDate' field.
   * @return The value of the 'orderDate' field.
   */
  public java.lang.String getOrderDate() {
    return orderDate;
  }


  /**
   * Sets the value of the 'orderDate' field.
   * @param value the value to set.
   */
  public void setOrderDate(java.lang.String value) {
    this.orderDate = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Creates a new OrderCreate RecordBuilder.
   * @return A new OrderCreate RecordBuilder
   */
  public static com.social.ecom.order.avro.OrderCreate.Builder newBuilder() {
    return new com.social.ecom.order.avro.OrderCreate.Builder();
  }

  /**
   * Creates a new OrderCreate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderCreate RecordBuilder
   */
  public static com.social.ecom.order.avro.OrderCreate.Builder newBuilder(com.social.ecom.order.avro.OrderCreate.Builder other) {
    if (other == null) {
      return new com.social.ecom.order.avro.OrderCreate.Builder();
    } else {
      return new com.social.ecom.order.avro.OrderCreate.Builder(other);
    }
  }

  /**
   * Creates a new OrderCreate RecordBuilder by copying an existing OrderCreate instance.
   * @param other The existing instance to copy.
   * @return A new OrderCreate RecordBuilder
   */
  public static com.social.ecom.order.avro.OrderCreate.Builder newBuilder(com.social.ecom.order.avro.OrderCreate other) {
    if (other == null) {
      return new com.social.ecom.order.avro.OrderCreate.Builder();
    } else {
      return new com.social.ecom.order.avro.OrderCreate.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderCreate instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderCreate>
    implements org.apache.avro.data.RecordBuilder<OrderCreate> {

    private int customerId;
    private java.util.List<com.social.ecom.order.avro.OrderItem> items;
    private float totalAmount;
    private java.lang.String orderDate;
    private java.lang.String status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.social.ecom.order.avro.OrderCreate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.items)) {
        this.items = data().deepCopy(fields()[1].schema(), other.items);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[2].schema(), other.totalAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[3].schema(), other.orderDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderCreate instance
     * @param other The existing instance to copy.
     */
    private Builder(com.social.ecom.order.avro.OrderCreate other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.items)) {
        this.items = data().deepCopy(fields()[1].schema(), other.items);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[2].schema(), other.totalAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[3].schema(), other.orderDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public int getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder setCustomerId(int value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<com.social.ecom.order.avro.OrderItem> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder setItems(java.util.List<com.social.ecom.order.avro.OrderItem> value) {
      validate(fields()[1], value);
      this.items = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder clearItems() {
      items = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public float getTotalAmount() {
      return totalAmount;
    }


    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder setTotalAmount(float value) {
      validate(fields()[2], value);
      this.totalAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder clearTotalAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDate' field.
      * @return The value.
      */
    public java.lang.String getOrderDate() {
      return orderDate;
    }


    /**
      * Sets the value of the 'orderDate' field.
      * @param value The value of 'orderDate'.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder setOrderDate(java.lang.String value) {
      validate(fields()[3], value);
      this.orderDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDate' field has been set.
      * @return True if the 'orderDate' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderDate' field.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder clearOrderDate() {
      orderDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder setStatus(java.lang.String value) {
      validate(fields()[4], value);
      this.status = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.social.ecom.order.avro.OrderCreate.Builder clearStatus() {
      status = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderCreate build() {
      try {
        OrderCreate record = new OrderCreate();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.items = fieldSetFlags()[1] ? this.items : (java.util.List<com.social.ecom.order.avro.OrderItem>) defaultValue(fields()[1]);
        record.totalAmount = fieldSetFlags()[2] ? this.totalAmount : (java.lang.Float) defaultValue(fields()[2]);
        record.orderDate = fieldSetFlags()[3] ? this.orderDate : (java.lang.String) defaultValue(fields()[3]);
        record.status = fieldSetFlags()[4] ? this.status : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderCreate>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderCreate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderCreate>
    READER$ = (org.apache.avro.io.DatumReader<OrderCreate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.customerId);

    long size0 = this.items.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.social.ecom.order.avro.OrderItem e0: this.items) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeFloat(this.totalAmount);

    out.writeString(this.orderDate);

    out.writeString(this.status);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.customerId = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<com.social.ecom.order.avro.OrderItem> a0 = this.items;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.social.ecom.order.avro.OrderItem>((int)size0, SCHEMA$.getField("items").schema());
        this.items = a0;
      } else a0.clear();
      SpecificData.Array<com.social.ecom.order.avro.OrderItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.social.ecom.order.avro.OrderItem>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.social.ecom.order.avro.OrderItem e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.social.ecom.order.avro.OrderItem();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.totalAmount = in.readFloat();

      this.orderDate = in.readString();

      this.status = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.customerId = in.readInt();
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<com.social.ecom.order.avro.OrderItem> a0 = this.items;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.social.ecom.order.avro.OrderItem>((int)size0, SCHEMA$.getField("items").schema());
            this.items = a0;
          } else a0.clear();
          SpecificData.Array<com.social.ecom.order.avro.OrderItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.social.ecom.order.avro.OrderItem>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.social.ecom.order.avro.OrderItem e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.social.ecom.order.avro.OrderItem();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.totalAmount = in.readFloat();
          break;

        case 3:
          this.orderDate = in.readString();
          break;

        case 4:
          this.status = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










